# Dumb mini makefile:
# 0) assumes clang/GCC like options
# 1) every .c file is to be built into an executable

# if CC is the default (not environment varible nor supplied to make, then default
ifeq ($(origin CC),default)
  CC = clang-15
endif

IDIRS  = -I../.. -I..
CFLAGS = -g -O3 -flto ${IDIRS} -march=native -Wall -Wextra -Wconversion -Wpedantic -Wno-unused-function
LDLIBS = 

# add filtering into two groups w/o and w m4ri
SRC     := ${wildcard *.c}
HEADERS := ${wildcard *.h}
TARGETS := ${SRC:.c=}
SIMDE   := ${SRC:.c=_simde}

all:    ${TARGETS}

SIMDe:	${SIMDE}

spew:
	@echo ${SRC:.c=_simde}


.DEFAULT help:
	@echo "help            : there is no buildsystem"
	@echo " make           : builds all the test"
	@echo " make SIMDe     : builds all the test (with SIMDe)"
	@echo " make clean     : deletes all executables"
	@echo " make distclean : clean + kill emacs tempfiles and makedep file"

.PHONY: clean

clean:
	-${RM} ${TARGETS} ${SIMDE}

distclean:	clean
	-${RM} .makedep *~

.makedep:
	@-echo "building dependencies"
	@-echo "# autogenerated by Makefile" > .makedep
	@$(foreach file, $(SRC), ${CC} ${IDIRS} -MM -MQ${file:.c=}  $(file) >> .makedep;)

# anything with a m4ri suffix requires m4ri
%_m4ri_simde: %_m4ri.c Makefile
	${CC} -DSFH_USE_SIMDE ${CFLAGS} $< -L.. ${LDLIBS} -lm4ri -o $@

%_m4ri: %_m4ri.c Makefile
	${CC} ${CFLAGS} $< -L.. ${LDLIBS} -lm4ri -o $@

%_simde:%.c	Makefile
	${CC} -DSFH_USE_SIMDE ${CFLAGS} $< -L.. ${LDLIBS} -o $@

%:%.c	Makefile
	${CC} ${CFLAGS} $< -L.. ${LDLIBS} -o $@

-include .makedep
