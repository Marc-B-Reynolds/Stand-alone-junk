// -*- mode: c; -*- 

// hacky garbage WIP


// sigh. not even started

//
//   f     : function being approximated
//   build : function to build approximation (returns error measure)
//   range : range of the approximation
//   c0,c1 : subrange to search of the 'cut'

/*
procedure find_cut_same_exp(f,build,range,basis,c0,c1)
{
  var cut,scale,r0,r1;

  cut   = c0;
  scale = exponent(c0);
  
  if (scale == exponent(c1)) then {
    var i0,i1;
    i0    = mantissa(c0);
    i1    = mantissa(c1);
    scale = 2^(-scale);

    
  }
  else {
    print("find_cut_same_exp: search bounds must have the same exponent");
  };

  return cut;
};
*/

// WIP (cut-n-paste junk atm): assumes neither odd nor even
procedure build_cut(capprox)
{
  var c0,c1;


  display=decimal!;

  /*
  write("static inline f32_", name @ "_k" @ (length(c)+1) @ "(float x)\n{\n  static ");
  f32_write_list("C", c);
  print("");
  print("  float s = x*x;");
  print("  float r;\n");
  print("  r = f32_horner_" @ (length(c)-1) @ "(s,C);");
  display=hexadecimal!;
  print("  r = fmaf(r,s,", e.l @ "f)");
  print("  r = fmaf(x,", e.h @ "f, x*r);");
  print("");
  print("  return r;");
  print("}\n");
  */

  display=d!;
};


procedure find_cut_initial(build,x0,x1,cut)
{
  var d;
  var e_diff,t;
  var c_lo,c_hi;
  var cnt;
  var lo,hi,r;

  d    = display;
  cnt  = 1;
  c_lo = x0;
  c_hi = x1;

  lo      = build(x0,cut);
  hi      = build(cut,x1);
  display = hexadecimal!;
  e_diff  = abs(lo.aerror-hi.aerror);

  print(" cut=", cut, " [", c_lo,",",c_hi,"]");

  // change to while to early exit
  for cnt from 1 to 32 do {
    display=decimal!;
   
    if (lo.aerror < hi.aerror) then {
      c_lo = cut;
    } else {
      c_hi = cut;
    };

    t = abs(lo.aerror-hi.aerror);

    if (t < e_diff) then { e_diff=t; write("+"); } else { write(" "); };

    cut = single((c_lo+c_hi)*0.5);
    lo  = build(x0,cut);
    hi  = build(cut,x1);
    
    if (cnt < 10) then { write(" "); };
    write(cnt, ": ");
    display=hexadecimal!;
    write("lo/hi error=", lo.aerror, " ", hi.aerror);
    print(" cut=", cut, " [", c_lo,",",c_hi,"]", single(e_diff));
  };

  display = d!;

  r.lo = lo;
  r.hi = hi;

  return r;
};



// helper: initial at point middle of range
procedure find_cut(build,x0,x1)
{
  find_cut_initial(build,x0,x1,single(0.5*(x0+x1)));
};
