// -*- mode: c; -*- 

// spitball approximations of acospi(x)

// set up some globals
E  = absolute;
B  = [|24...|];
F  = acos(x)/pi;
tx = sqrt(1-x);

// range set to avoid bad control points
x0 = 0x1.9p-25;  // RN(acospi(x)) = 1/2 on [-0x1.921fb4p-24, 0x1.921fb4p-25]
x1 = 1 - 2^-25;  // 1 - ulp(1)/2
R  = [x0 ; x1];

execute("util.sollya");
execute("cut.sollya");

// for acospi(x) : relaxed f(0)
rbasis2 = [|tx,tx*x|];
rbasis3 = [|tx,tx*x,tx*x^2|];
rbasis4 = [|tx,tx*x,tx*x^2,tx*x^3|];
rbasis5 = [|tx,tx*x,tx*x^2,tx*x^3,tx*x^4|];
rbasis6 = [|tx,tx*x,tx*x^2,tx*x^3,tx*x^4,tx*x^5|];
rbasis7 = [|tx,tx*x,tx*x^2,tx*x^3,tx*x^4,tx*x^5,tx*x^6|];
rbasis8 = [|tx,tx*x,tx*x^2,tx*x^3,tx*x^4,tx*x^5,tx*x^6,tx*x^7|];

// for acospi(x) : exact f(0)
ebasis2 = [|tx*x|];
ebasis3 = [|tx*x,tx*x^2|];
ebasis4 = [|tx*x,tx*x^2,tx*x^3|];
ebasis5 = [|tx*x,tx*x^2,tx*x^3,tx*x^4|];
ebasis6 = [|tx*x,tx*x^2,tx*x^3,tx*x^4,tx*x^5|];
ebasis7 = [|tx*x,tx*x^2,tx*x^3,tx*x^4,tx*x^5,tx*x^6|];
ebasis8 = [|tx*x,tx*x^2,tx*x^3,tx*x^4,tx*x^5,tx*x^6,tx*x^7|];


// f(0) relaxed approx
procedure acospi_build_relaxed(x0, x1)
{
  var r;

  r.arange  = [x0;x1];
  r.approx = fpminimax(acos(x)/pi, builder_basis, B, r.arange, floating, E);
  r.aerror = single(dirtyinfnorm(r.approx-acos(x)/pi, r.arange));

  return r;
};

// f(0) exact approx
procedure acospi_build_exact(x0, x1)
{
  var r;

  r.arange  = [x0;x1];
  r.approx = fpminimax(acos(x)/pi, builder_basis, B, r.arange, floating, E, tx*0.5);
  r.aerror = single(dirtyinfnorm(r.approx-acos(x)/pi, r.arange));

  return r;
};


// relative error (via f32_build...)
//display=hexadecimal!;
//f32_build_constrained(F, ebasis5, x0, x1, 0.5*tx).approx;
//f32_build_constrained(F, ebasis6, x0, x1, 0.5*tx).approx;
//f32_build_constrained(F, ebasis7, x0, x1, 0.5*tx).approx;

// the 2 promote to 64-bit kernels
//f64_build(F, rbasis7, x0, x1).approx;
//f64_build(F, rbasis8, x0, x1).approx;


procedure acospi_find_cut_exact(basis)
{
  builder_basis=basis;
  return find_cut(acospi_build_exact, x0, x1);
};

procedure acospi_find_cut_relaxed(basis)
{
  builder_basis=basis;
  return find_cut(acospi_build_relaxed, x0, x1);
};

//**** cut - doesn't seem useful here

// minimize abs error
//acospi_find_cut_exact(ebasis2);  // 0x1.1a6b24p-1
//acospi_find_cut_exact(ebasis3);  // 0x1.065e6cp-1
//acospi_find_cut_exact(ebasis4);  // 0x1.f65f3p-2
//acospi_find_cut_exact(ebasis5);  // 0x1.e838dp-2
//acospi_find_cut_exact(ebasis6);  // 0x1.de6d4cp-2
//acospi_find_cut_exact(ebasis7);  // 0x1.d6d5f4p-2


//E = relative;
// minimize rel error
//acospi_find_cut_exact(ebasis3);  // 0x1.22188p-1
//acospi_find_cut_exact(ebasis4);  // 0x1.0e778p-1
//acospi_find_cut_exact(ebasis5);  // 0x1.02e464p-1
//acospi_find_cut_exact(ebasis6);  // 0x1.f64f7p-2 
//acospi_find_cut_exact(ebasis7);  // 0x1.ebf4b8p-2

//display=hexadecimal!;
//cut6 = 0x1.de6d4cp-2;
//f32_build_constrained(F, ebasis7, x0, cut6, 0.5*tx).approx;
//f32_build(F, rbasis7, cut6, x1).approx;
