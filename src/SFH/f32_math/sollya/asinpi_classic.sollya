// -*- mode: c; -*- 

// classic polynomial approximation of asin on [-1/2,1/2]
// x + x^3 P(x^2)

execute("util.sollya");

x0 = 0+2^-2048;
x1 = 1/2;

// correctly rounded initial term 
// sinpi(x) ~= x/pi + x^3 P(x^2)

execute("util.sollya");

// x/pi + x^3 P(x^2)
procedure asinpi_build(basis, x0,x1)
{
  var r,c;

  // build the approximation and dump P. need to drop
  // the coefficient of 'x' (which is constrained to 1/pi)
  r = f32_build_constrained(asin(x)/pi, basis, x0, x1, x/pi);
  c = tail(list_of_odd_coeff(r.approx));

  print("// ~abs error =", r.aerror);
  print("// ~rel error =", r.rerror);
  f32_print_kernel_list("f32_asinpi_k" @ (length(c)+1) , c);
  
  return r;
};

P4 = asinpi_build([|3,5,7,9|],          x0,x1);
P5 = asinpi_build([|3,5,7,9,11|],       x0,x1);
P6 = asinpi_build([|3,5,7,9,11,13|],    x0,x1);
P7 = asinpi_build([|3,5,7,9,11,13,15|], x0,x1);

