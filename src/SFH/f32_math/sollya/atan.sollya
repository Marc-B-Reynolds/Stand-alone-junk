// -*- mode: c; -*- 

// classic polynomial approximation of asin on [-1/2,1/2]
// x + x^3 P(x^2)

// set up some globals
x0 = 0+2^-2048;
x1 = tan(pi/8);

execute("util.sollya");

// x + x^3 P(x^2)
procedure atan_build(basis, x0,x1)
{
  var r,c;

  // build the approximation and dump P. need to drop
  // the coefficient of 'x' (which is constrained to 1)
  r = f32_build_constrained(atan(x), basis, x0, x1, x);
  c = tail(list_of_odd_coeff(r.approx));

  print("// ~abs error =", r.aerror);
  print("// ~rel error =", r.rerror);
  f32_print_kernel_list("f32_atan_k" @ (length(c)-1) , c);
  
  return r;
};

P4 = atan_build([|3,5,7,9|],          x0,x1);
P5 = atan_build([|3,5,7,9,11|],       x0,x1);
P6 = atan_build([|3,5,7,9,11,13|],    x0,x1);
P7 = atan_build([|3,5,7,9,11,13,15|], x0,x1);


// for promote to double variants of P
procedure atan_build_dp(basis, x0,x1)
{
  var r,c;

  // build the approximation and dump P. need to drop
  // the coefficient of 'x' (which is constrained to 1)
  r = f64_build_constrained(atan(x), basis, x0, x1, x);
  c = tail(list_of_odd_coeff(r.approx));

  print("// ~abs error =", r.aerror);
  print("// ~rel error =", r.rerror);
  f64_print_kernel_list("f32_atan_d" @ (length(c)-1) , c);
  
  return r;
};

P4 = atan_build_dp([|3,5,7,9|],          x0,x1);
P5 = atan_build_dp([|3,5,7,9,11|],       x0,x1);
P6 = atan_build_dp([|3,5,7,9,11,13|],    x0,x1);
//P7 = atan_build_dp([|3,5,7,9,11,13,15|], x0,x1);

