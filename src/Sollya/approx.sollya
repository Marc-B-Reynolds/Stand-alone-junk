/* -*- mode: c; -*- */

// Marc B. Reynolds, 2016
// Public Domain under http://unlicense.org, see link for details.

// approx control structure:
//             1234
//   _name     *... string for pretty printing
//   _nterms   *... target number of product terms
//   _symmetry *... 0=even, 1=odd, 2=neither
//
//   _func     .... function to approximate
//   _range    .... input range (domain)
//   _degree   .... list of values for fpminimax
//   _min_type .... absolute or relative
//   
//   _r_fp32   .... input/ouput in binary32?
//   _w_fp32   .... working in binary32?
//
//   _target_error   ....

// 1) setup code
// 2) fpminimax
// 3) guessdegree

_a_debug = false;
_a_library_loaded = true;

suppressmessage(346);

/*
if (!isbound(__argv)) then {
  print("ERROR: requires sollya 5+");
  quit;
};

if (__argv == [||]) then {
  print("USAGE: sollya approx.solly scripts...");
  quit;
};
*/


// amount to bias the range in an end-point is a zero.
// massive hack city.
_a_zero_range_bias = 2^-24;

{
  var ws,v,i;
  ws = [||];
  v  = "";

  for i from 0 to 20 do {
    ws = ws :. v;
    v = v @ " ";
  };

  a_env._ws = ws;
};

//a_env._ws;
a_env._level   = 1;     // block level of output
a_env._inset   = 2;     // number of spaces per block level
a_env._ivar    = "x";   // input to core of approximation
a_env._rvar    = "r";   // computed result of approximation
a_env._r_fp32  = true;  // in/out in binary32
a_env._w_fp32  = true;  // working precision in binary32
a_env._hexfp   = false; // generate fp constants in hex 
a_env._compile = "gcc -Wall -o test";

// returns field 'f' in 's' if exists, otherwise defaults to a_env.'f'
procedure a_env_field(s,f)
{
  var t;
  t = "match s with { ." @ f @ " = default } : (s."@ f @") default: (s_get_field(a_env,\""@ f @ "\",0));";
  return parse(t);
};


//**************************************
// warnings and debugging support

_a_warn_once = [||];

procedure a_warn_once(str)
{
  var r;

  r = false;
  
  if (!is_in_list(_a_warn_once, str)) then {
     print("WARNING:", str);
    _a_warn_once = _a_warn_once :. str;
   r = true;
  };

  return r;
};

procedure a_warn_once_reset()
{
 _a_warn_once = [||];
};

procedure a_debug_print(l)
{
  if (_a_debug == true) then {
     print(l);
  };
};

procedure a_env_hex_in()
{
  if (s_get_field(a_env, "_hexfp", false)) then display=hexadecimal!;
};

procedure a_env_hex_out()
{
  display=decimal!;
};

procedure a_has_error(s)
{
  var r;

  r = false;
  
  if (s_has_field(s, "_error")) then {
    r = s._error != 0;
  };
  
  return r;
};

// not done
procedure a_is_valid(s)
{
  var r;
  r = true;
  
  if (!s_has_field(s, "_error")) then { r = false; };
};


// defines for _symmetry field. Any reason to bother with odd biased?
A_SYMMETRY_EVEN = 0;
A_SYMMETRY_ODD  = 1;
A_SYMMETRY_NONE = 2;


// f(p)-dx <0 && fp(p)+dx > 0 for all of dom
procedure a_detect_sym_(f,dx,p,dom)
{
  var x0,x1,r;
  r  = false;

  x0 = evaluate(f-dx, p);
  x1 = evaluate(f+dx, p);
  
  if ((x1 > 0) && (x0 < 0)) then {
    var z0,z1;

    z0 = dirtyfindzeros(f-dx, dom);
    z1 = dirtyfindzeros(f+dx, dom);

    if ((z1 == [||]) && (z0 == [||])) then {
      r = true;
   };
  };
  return r;
};

procedure a_detect_symmetry(s)
{
  var dom,f;
  var r;
  var dx;
  var ep;
  
  a_debug_print("a_detect_symmetry");
  r   = A_SYMMETRY_NONE;
  dx  = 2^-24;
  dom = s._range;
  dom = [0; max(abs(sup(dom)), abs(inf(dom)))];
  ep  = sup(dom)/2;

  // even/odd testing functions
  // even: f(x)-f(-x) = 0 -> f(x)/f(-x)-1 = 0
  // odd : f(x)+f(-x) = 0 -> f(x)/f(-x)+1 = 0
  f = simplifysafe(s._func(x)/s._func(-x)-1);

  if (a_detect_sym_(f,ep,dx,dom)) then {
    r = A_SYMMETRY_EVEN;
  } else  {
    f = simplifysafe(s._func(x)/s._func(-x)+1);

    if (a_detect_sym_(f,ep,dx,dom)) then {
      r = A_SYMMETRY_ODD;
    } else {
       a_warn_once("no symmetry detected..not handling this case well.");
      // TODO: could check of biased odd as well
      // (f(x)+k)+(f(-x)+k) = 2k -> f(x)/f(-x) = 1/(2k)
      //var z0,z1,x0,x1;
      //x0 = evaluate(f-dx, dom);
      //x1 = evaluate(f+dx, dom);
      //z0 = dirtyfindzeros(f-dx, dom);
      //z1 = dirtyfindzeros(f+dx, dom);
      //x0;
      //x1;
      //z0;
      //z1;
    };
  };

  a_debug_print("a_detect_symmetry");
  
  return r;
};

// symmetry check of the polynomial approximation
procedure a_check_symmetry(s)
{
  var p,r,d,e,o,i;
  
  a_debug_print("a_check_symmetry");
  p = s._poly;
  d = degree(p);
  r = A_SYMMETRY_NONE;
  e = 0;
  o = 0;

  for i from 0 to d by 2 do
    if (coeff(p,i) != 0) then e := e + 1;

  for i from 1 to d by 2 do
    if (coeff(p,i) != 0) then o := o + 1;

  if ((e!=0) && (o==0)) then r = A_SYMMETRY_EVEN;
  if ((e==0) && (o!=0)) then r = A_SYMMETRY_ODD;
  a_debug_print("a_check_symmetry");

  return r;
};


// Guess the needed degree for given error defined
// by field "_target_error".
procedure a_guessdegree(s)
{
  a_debug_print("a_guessdegree");
  r = guessdegree(s._func, s._range, s._target_error);
  s._guessdegree = r;
  a_debug_print("a_guessdegree");
  return r;
};

a_fp_format_f32 = [|24...|];
a_fp_format_f64 = [|53...|];

procedure a_bool_to_fp(is_single)
{
  var r;
  
  if (is_single != false) then {
    r = a_fp_format_f32;
  }
  else {
    r = a_fp_format_f64;
  };
  return r;
};


procedure a_round_func(is_single)
{
  var r;
  
  if (is_single != false) then {
    r = a_round_f32;
  }
  else {
    r = a_round_f64;
  };
  return r;
};



// format list of binary32 and binary64
procedure a_wp(s)
{
  return a_bool_to_fp(s_get_field(s,"_w_fp32",true));
};


procedure a_fpminimax(s)
{
  a_debug_print("a_fpminimax");
  a_debug_print(s);

  if (!s_has_field(s,"_constrain")) then {
    s._poly = fpminimax(s._func, s._degree, a_wp(s), s._a_range, floating, s._min_type);
  } else {
    s._poly = fpminimax(s._func, s._degree, a_wp(s), s._a_range, floating, s._min_type, s._constrain);
  };
    
//s._supnorm  = supnorm(s._poly, s._func, s._a_range, s._min_type, 2^-128);
  s._infnorm  = single(dirtyinfnorm(s._func-s._poly, s._a_range));
  s._maxpnts  = list_to_f32(dirtyfindzeros(diff(s._func-s._poly), s._a_range));
  s._zeropnts = list_to_f32(dirtyfindzeros(s._func-s._poly,       s._a_range));

  a_debug_print("a_fpminimax");
  return s;
};

procedure a_mock_ex(s,p)
{
  var r;
  r = s_copy(s);

  if (!s_has_field(s,"_a_range")) then {
    a_warn_once("a_mock_ex - no reduced approximation range. Defaulting to full range.");
    s._a_range = s._range;
  };
  
  r._poly     = roundcoefficients(p, a_wp(r));
  r._degree   = a_poly_to_degree(r._poly);
  r._infnorm  = single(dirtyinfnorm(r._func-r._poly, r._a_range));
  r._maxpnts  = list_to_f32(dirtyfindzeros(diff(r._func-r._poly), r._a_range));
  r._zeropnts = list_to_f32(dirtyfindzeros(s._func-s._poly,       s._a_range));

  return r;
};

procedure a_mock_ex_fake(s,p)
{
  var r;
  r = s_copy(s);

  if (!s_has_field(s,"_a_range")) then {
    a_warn_once("a_mock_ex - no reduced approximation range. Defaulting to full range.");
    s._a_range = s._range;
  };

  r._poly    = p;
  r._degree  = a_poly_to_degree(r._poly);
  r._infnorm = single(dirtyinfnorm(r._func-r._poly, r._a_range));
  r._maxpnts = list_to_f32(dirtyfindzeros(diff(r._func-r._poly), r._a_range));

  return r;
};

procedure a_setup(f,r)
{
  var s;
  s._func     = f;           // the function to approx
  s._range    = r;           // input domain of approx
  s._min_type = relative;    // minimize relative error
  s._r_fp32   = true;        // in/out in binary32
  s._w_fp32   = true;        // work in binary32
  s._name     = "" @ f;      // use function as default name
  return s;
};

procedure a_create_degree(s,n)
{
  var d,t,z,m;

  a_debug_print("a_create_degree");
  t = s._symmetry;

  if (t == A_SYMMETRY_EVEN) then {
    n = ceil((n+1)/2);
    d = even_list(n);
  } else if (t==A_SYMMETRY_ODD) then {
    n = ceil((n+1)/2);
    d = odd_list(n);
  } else {
    d = full_list(n);
  };

  a_debug_print("a_create_degree");

  return d;
};

procedure a_create_nterms(s,n)
{
  var d,t,z,m;

  a_debug_print("a_create_nterms");
  t = s._symmetry;

  if (t == A_SYMMETRY_EVEN) then {
    d = even_list(n);
  } else if (t==A_SYMMETRY_ODD) then {
    d = odd_list(n);
  } else {
    d = full_list(n);
  };

  a_debug_print("a_create_nterms");

  return d;
};


procedure a_narrow_range(s)
{
  var t,r,nr,z;

  a_debug_print("a_narrow_range");
  t  = s._symmetry;
  r  = s._range;
  nr = r;

  if (t != A_SYMMETRY_NONE) then {
    if ((inf(r) <= 0) && (sup(r) >= 0)) then {
      nr = [0,max(-inf(r),sup(r))];
    };
  };

  // see if there are any zeros in the domain
  z = dirtyfindzeros(s._func, nr);

  // MASSIVE DIRTY HACK
  if (z != [||]) then {
    var t;
    t  = nr;
    nr = [||];
    
    if (length(z)==1) then {
      if (within_dx(z[0],inf(t),_a_zero_range_bias)) then {
        nr = [max(inf(t),z[0])+_a_zero_range_bias, sup(t)];
      } else if (within_dx(z[0],sup(t),_a_zero_range_bias)) then {
        nr = [inf(t), min(sup(t),z[0])-_a_zero_range_bias];
      };
    };

    if (nr == [||]) then {
      print("ERROR: I'm too dumb to remove the zeros at: ", z, sup(t), abs(z[0]-sup(t)));
    };
  };

  a_debug_print("a_narrow_range");

  return nr;
};

// Add a constraint that f(n) = v. This simply replaces
// the final term of the polynomial, so the result is
// sub-optimal.
// TODO: broken for n!=1 sigh
procedure a_constrain(s,n,v)
{
  var p,r,m,e,f;

  r = s_copy(s);
  p = s._poly;

  if (n != 1) then {
    print("  :ERROR: a_constraint - n != 1 needs to be fixed");
  };

  // choose the function to insure proper rounding
  if (s._w_fp32) then {
    f = proc(n) { return single(n); };
  } else {
    f = proc(n) { return double(n); };
  };

  m = a_poly_to_degree(p);
  e = length(m)-1;

  if (e != -1) then {
    var o,d,c,s,i;
    o = p;
    d = m[0];
    c = f(coeff(p,d));
    s = c;
    p = c*x^d;
      
    for i from 1 to e-1 do {
      d = m[i];
      c = f(coeff(o,d));
      p = p + c*x^d;
      s := s+c;
    };

    d = m[e];
    p = p + f((v/n)-s)*x^d;
  } else {
    print("  :ERROR: a_constraint - not a straight polynomial", p);
    p = p;
  };

  r._poly = p;

  return r;
};

procedure a_build_approx(s)
{
  var t, refine, success;
  
  a_debug_print("a_build_approx");

  refine  = false;
  success = true;

  if (s_has_field(s,"_error")) then s._error = 0;

  // If we don't know if odd/even/neither...figure it out
  s._symmetry = s_get_field(s, "_symmetry", -1);

  if (s._symmetry < 0 || s._symmetry > A_SYMMETRY_NONE) then
    s._symmetry = a_detect_symmetry(s);

   // If we don't have an explict list of terms we
  // need to perform some prep work.
  if (s_has_field(s,"_degree") == false) then {
  
    // Do we have a target theoretic error?
    if (s_has_field(s, "_target_error") == true) then {
      s._guessdegree = a_guessdegree(s);
      s._degree = a_create_degree(s, sup(s._guessdegree));
      refine = true;
    } else if (s_has_field(s, "_nterms") == true) then {
      s._degree = a_create_nterms(s, s._nterms);
    } else {
      success = false;
      s._error = 1; // TODO: 
      print("ERROR: set _target_error and/or _nterms.");
    };
  };

  a_debug_print("a_build_approx: range");

  // work out the actual range to use for the approximation
  if (s_has_field(s,"_a_range") == false) then {
    s._a_range = a_narrow_range(s);
  };

  if (s_has_field(s,"_degree") && success == true && s._a_range != [||]) then {
    s = a_fpminimax(s);
  };

  if (success == false) then {
    print("ERROR: could not create approximation.");
  };

  a_debug_print("a_build_approx");
  return s;
};

// returns a copy of 's' with one more product
procedure a_add_term(s)
{
  var S;

  if (s_has_field(s,"_a_range") != false) then {
    var t,v;
    S = s_copy(s);
    t = s._degree;
    v = t[length(t)-1];

    if (s._symmetry != A_SYMMETRY_NONE) then {
      t = t :. (v+2);
    } else {
      t = t :. (v+1);
    };
    
    S._degree = t;
    S = a_build_approx(S);
  } else {
    print("ERROR: error in input function.");
  };

  return S;
};


// returns a copy of 's' with one less product
procedure a_sub_term(s)
{
  var S;

  if (s_has_field(s,"_a_range") != false) then {
    var t,v,e,i;
    
    S = s_copy(s);
    t = [||];
    e = length(s._degree);

    for i from 0 to e-2 do {
      t = t :. s._degree[i];
    };
    
    S._degree = t;
    S = a_build_approx(S);
  } else {
    print("ERROR: error in input function.");
  };

  return S;
};

//  _lo._infnorm <= s._target_error <= _hi.infnorm
procedure a_to_target_bound(s)
{
  var r,lo,hi,done,t,te;
  te   = s._target_error;
  done = 5;
  lo   = s;
  hi   = s;

  if (s._infnorm < te) then {
    while (done > 0) do {
      t  = hi;
      hi = a_sub_term(hi);
      lo = t;
      done := done-1;
      
      if (hi._infnorm >= te) then {
        done = 0;
      };
    };
  } else {
    while (done > 0) do {
      t  = lo;
      lo = a_add_term(lo);
      hi = t;
      done := done-1;
      
      if (lo._infnorm <= te) then {
        done = 0;
      };
    };
  };

  r._lo = lo;
  r._hi = hi;

  return r;
};

// make a degree list from polynomial 'p'.
procedure a_poly_to_degree(p)
{
  var d,e,c,i;
  d = [||];
  e = degree(p);
  for i from 0 to e do {
    c = coeff(p,i);
    if (c != 0) then { d = d :. i; };
  };
  return d;
};

// this is dumb
a_decimal_digits = [|"0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19"|];

// convert a polynomial into c-source
//   p    = polynomial
//   ivar = name of input variable
//   rvar = name of result variable
//
// returns a structure:
//   .listing  = c-source fragment (poly only)
//   .runnable = false if we have term gaps greater than
//               currently handled..needs manual fix-up.

// TODO: if not hex output instead output exact rationals
// like plotly_poly_to_tex output.
procedure a_poly_to_source_c(p,ivar,rvar,inset,si,sw)
{
  var m,e,l,c,ld,d,line,ce,r,i;
  var le,sl,me;
  var fpsuffix;
  var fptype;
  var runnable;
  var lead_ws,line_init;

  runnable = true;

  if (sw) then {
    fpsuffix = "f";
    fptype   = "float";
  } else {
    fpsuffix = "";
    fptype   = "double";
  };

  m  = a_poly_to_degree(p);
  e  = length(m)-1;
  l  = "";
  sl = "";
  ld = 0;
  me = 0;
  lead_ws = a_env._ws[inset];
  line_init = lead_ws @ rvar @ "  = ";

  // build the poly from highest to lowest terms.
  // currently one term per source line.
  for i from 0 to e do {
    d    = m[i];
    c    = coeff(p,d);
    ce   = d-ld;
    line = line_init;

    // deal with the power
    if (ce > 1) then {
      line = line @ ivar @ a_decimal_digits[ce] @ "*(";

      // power usage: track max and warn for unhandled cases.
      if (ce <= 5) then {
        if (ce > me) then {me=ce;};
      } else {
	print("WARNING: source needs fixup for powers\n");
	runnable = false;
      };
    } else if (d-ld == 1) then {
      line = line @ ivar @ " *(";
    } else {
      line = line @ "   (";
    };

    // first term = no composition
    if (i != e) then {
      line = line @ rvar;
    } else {
      line = line @ " ";
    };

    // add a plus sign if not negative
    if (c > 0) then { line = line @ "+";};

    // add coefficient
    line = line @ c @ fpsuffix @ ");\n";

    ld = d;
    l = line @ l;
  };

  // create working vars
  {
    var pre;
    pre = lead_ws @ fptype @ " " @ ivar;
    if (me == 5) then { l = pre @ "5 = " @ ivar @ "*"  @ ivar @ "4;\n" @ l;};
    if (me >= 4) then { l = pre @ "4 = " @ ivar @ "2*" @ ivar @ "2;\n" @ l;};
    if (me >= 3) then { l = pre @ "3 = " @ ivar @ "*"  @ ivar @ "2;\n" @ l;};
    if (me >= 2) then { l = pre @ "2 = " @ ivar @ "*"  @ ivar @  ";\n" @ l;};
  };

  r._listing  = l;
  r._runnable = runnable;

  return r;
};

procedure a_to_inline_f32(S,name)
{
  var s;
  
  s = "static inline float " @ name @ "(float x) {\n" @
    a_poly_to_source_c(S._poly,"x","r",2,true,true)._listing @
    "  return r;\n}\n";

  s = "// abs error = " @ S._infnorm @ "\n" @ s;

  return s;
};

// helper function for exact rationals
procedure a_constant_rational(c, fp32)
{
  var n,d;
  var r;

  // insure constant is properly rounded to required precision
  if (fp32) then {
    c = single(c);
  } else {
    c = double(c);
  };

  r.n = mantissa(c);
  r.d = 2^(-exponent(c));

  return r;
};

// returns \frac{num}{dem}
procedure a_constant_power_tex(c, fp32)
{
  // insure constant is properly rounded to required precision
  if (fp32) then {
    c = single(c);
  } else {
    c = double(c);
  };
  
  return mantissa(c) @  "\\times 2^{" @ exponent(c) @ "}";
};

// returns \frac{num}{dem}
procedure a_constant_rational_tex(c, fp32)
{
  var r;
  r = a_constant_rational(c, fp32);
  return "\\frac{" @ r.n @  "}{" @ r.d @ "}";
};

// returns (num/dem)
procedure a_constant_rational_c(c, fp32)
{
  var r,s;
  r = a_constant_rational(c, fp32);

  // TODO: should be verifing that the output is
  // exactly representable.
  
  if (fp32) then {
    s = ".f";
  } else {
    s = ".0";
  };
  
  return "(" @ r.n @ s @ "/" @ r.d @ s @ ")";
};

procedure a_make_listing(s)
{
  var level,inset,ivar,rvar,rfp,wfp;
  var r;

  // grab some pretty printing values from either 's' or 'a_env'
  level = a_env_field(s, "_level");
  inset = a_env_field(s, "_inset");
  ivar  = a_env_field(s, "_ivar");
  rvar  = a_env_field(s, "_rvar");
  rfp   = a_env_field(s, "_r_fp32");
  wfp   = a_env_field(s, "_w_fp32");

  r = a_poly_to_source_c(s._poly, ivar, rvar, level*inset, rfp, wfp);

  s._listing  = r._listing;
  s._runnable = r._runnable;

  return s;
};

// create a quick-n-direct inline code listing
// f = function to approximate
// d = degree list of approximation
// r = input domain
// name = generate function name
procedure a_simple_inline_f32(f,d,r,name)
{
  var p,e,infn,z;

  suppressmessage(346);
  
  p    = fpminimax(f, d, [|24...|], r, floating, E);
  e    = f-p;
  infn = dirtyinfnorm(f-p, r);
  z    = list_to_f32(dirtyfindzeros(diff(e), r));

  a_env_hex_in();
  print("// abs error =", single(infn));
  print("// zero      =",z);
  print("static inline float " @ name @ "(float x) {");
  a_poly_to_source_c(p, "x", "r", 2, true, true)._listing;
  print("  return r;\n}\n");
};

// values to automatically check for proceedures X
A_CHECK_INF_NORM     = 0;  // dirty inf normal of abs error
A_CHECK_MAX_POINTS   = 1;  // point on approx domain of max abs error
A_CHECK_EMPIRIC_TEST = 2;  // compile and test theoritic error results

procedure a_simple_check_f32(name,f,r)
{
  var p,e,infn,z;

  p    = parse(name);
  e    = f-p;
  infn = dirtyinfnorm(f-p, r);
  z    = list_to_f32(dirtyfindzeros(diff(e), r));
  a_env_hex_in();
  print(name);
  print("  abs error =", single(infn));
  //print("  zero      =",z);
  a_env_hex_out();
};


/*
for i in __argv do {
  execute(__argv[i]);
};
*/
