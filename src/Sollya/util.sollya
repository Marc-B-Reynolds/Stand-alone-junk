/* -*- mode: c; -*- */

if (!isbound(_util_library_loaded)) then {

_util_library_loaded = true;

procedure within_dx(a,b,d)
{
  return abs(a-b) < d;
};

// first 'n' odd values
procedure odd_list(n)
{
  var c,l,i;
  c = 2*n;
  l = [||];  

  for i from 1 to c by 2 do l = l:.i;

  return l;
};

// first 'n' even values
procedure even_list(n)
{
  var c,l,i;
  c = 2*n-1;
  l = [||];

  for i from 0 to c by 2 do l = l:.i;

  return l;
};

procedure full_list(n)
{
  var c,l,i;
  l = [||];  

  for i from 0 to n-1 do l = l:.i;

  return l;
};


procedure to_csv_string(l=...)
{
  var s,e,i;

  s = "";
  e = length(l)-2;

  for i from 0 to e do {
    s = s @ l[i] @ ",";
  };

  s = s @ l[e+1];

  return s;
};

// make a copy of list with f applied
procedure list_apply(l,f)
{
  var r,v,i;

  r = [||];

  for i from 0 to length(l)-1 do {
   v = f(l[i]);
   r = r :. v;
  };

  return r;
};


// make a copy of list as binary32
procedure list_to_f32(l)
{
  var r,v,i;

  r = [||];

  for i from 0 to length(l)-1 do {
   v := single(l[i]);
   r  = r :. v;
  };

  return r;
};

// return true if 'v' is in list 'l'
procedure is_in_list(l, v)
{
  var i,r,n;

  i = 0;
  r = false;
  n = length(l);
  
  while ((i < n) && (!r)) do {
    if (l[i] == v) then {r = true;};
    i := i + 1;
  };

  return r;
};
 
 
// scale elem of 'l' by 's' and convert to binary32
procedure scale_list_to_f32(l,s)
{
  var r,v,i;

  r = [||];

  for i from 0 to length(l)-1 do {
   v := s*single(l[i]);
   r  = r :. v;
  };

  return r;
};
};
