// Marc B. Reynolds, 2016
// Public Domain under http://unlicense.org, see link for details.

// Create plot.ly plots including generating an html page which can be auto-displayed.

// environment variables
_plotly._html_header = "<!DOCTYPE html><html><head><meta charset='utf-8'><title>Plot</title>" @
                       "<script src='https://cdn.plot.ly/plotly-latest.min.js'></script>"     @
                       "<script type='text/javascript' src='https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>" @
                       "</head><body>\n";
_plotly._html_footer = "</body></html>";

_plotly._round_digits = 12;       // number of binary digits to round to
_plotly._entries_per_line = 3;    // number of values to emit per line

_plotly._pages = [||];            // list of pages being built

_plotly._points           = 400;

// I'm ignoring these for the moment
_plotly._tickformat_x     = "";
_plotly._tickformat_y     = "";
_plotly._ticks_x          = 4;
_plotly._ticks_y          = 4;

// dumb attempt to figure out the OS
_plotly_ostype_macro = "  case `uname -s` in Linux*) echo 0;; CYGWIN*) echo 1 ;; Darwin*) echo 2;; *) echo -1;;esac";

// page structure: _plotly.pages stores an in-order list of structures
//   _fname   file name to create (foo.html)
//   _figs    in-order list of figures (figure structure)

// figure structure: actively building at _plotly._figure
//   _title   tile of the plot
//   _trace   list of traces


// attempt to figure out some shell commands
procedure plotly_guess_environment()
{
  var t;

  t = parse(bashevaluate(_plotly_ostype_macro));

  if (t == 1) then {
    _plotly._open_html = "cygstart ";
    } else if (t == 2) then {
     _plotly._open_html = "open ";
  };
};

// attempt to show 'fname' in a browser
procedure plotly_show_html(fname)
{
  if (!s_has_field(_plotly, "_open_html")) then {
    plotly_guess_environment();      
  };

  if (s_has_field(_plotly, "_open_html")) then {
    bashexecute(_plotly._open_html @ fname);
  } else {
    print("ERROR: I'm not smart enough to open a brower page");
  };
};


// start a new figure.
procedure plotly_new_figure(title)
{
  _plotly._figure._title  = title;
  _plotly._figure._trace  = [||];
};

plotly_new_figure("approx.sollya");

// adds a plot trace to the current figure
procedure plotly_add_trace(t)
{
  _plotly._figure._trace = _plotly._figure._trace :. t;
};


// creates a plot trace of function 'f' over range 'r'
// using 'n' equispaced samples.  Names the plot 'tname'
// using plot.ly mode 'tmode'.
procedure plotly_make_trace(f,r,n,tname,tmode)
{
  // nothing clever just equispaced sampling
  // of the function.
  var r,i;
  var xl,yl;
  var x0,x1,y0,dx,nd,ei;

  x0  = inf(r);
  x1  = sup(r);
  dx := (x1-x0)/n;
  xl  = "    x:[";
  yl  = "    y:[";
  i   = 0;
  nd  = _plotly._round_digits;
  ei  = _plotly._entries_per_line;

  while(x0 <= x1) do {
    xl = xl @ round(x0,nd,RN);
    yl = yl @ round(evaluate(f,x0),nd,RN);
    x0 := x0+dx;
    i  := i+1;

    if (x0 <= x1) then {
      xl = xl @ ",";
      yl = yl @ ",";
    };
    
    if (i > ei) then {
      i  = 0;
      xl = xl @ "\n    ";
      yl = yl @ "\n    ";
    } else {
      xl = xl @ " ";
      yl = yl @ " ";
    };
  };

  xl = xl @ "],\n";
  yl = yl @ "],\n  mode: '" @ tmode @ "'";
  yl = yl @ ",\n  name: '"  @ tname @ "'";
  yl = yl @ "\n};\n\n";

  r = " = {\n" @ xl @ yl;

  return r;
};

procedure plotly_abs_error_trace(s, tname)
{
  return plotly_make_trace(s._poly(x)-s._func(x), s._range, _plotly._points, tname, "lines");
};


procedure plotly_rel_error_trace(s,name)
{
  return plotly_make_trace(1-s._poly(x)/s._func(x), s._range, _plotly._points, tname, "lines");
};


procedure plotly_poly_to_mathjax(p)
{
  // only 
  var l,e,m,d,i, _display,xe,xm;
  l = "";
  m = a_poly_to_degree(p);
  e = length(m)-1;
  m;
  e;

  _display = display;
  display  = decimal!;

  for i from e to 0 by -1 do {
    d = m[i];
    c = coeff(p,d);
    xe = exponent(c);
    xm = mantissa(c);

    if (d > 1) then {
      l = " x^{" @ d @ "}" @ l;
    } else if (d == 1) then {
      l = " x" @ l;
    };

    if (xe != 0) then {
      l = " \\times 2^{" @ xe @ "}" @ l;
    };

    l = xm @ l;

    if (c >= 0 && i != 0) then {
      l = "+" @ l;
    };
  };

  display  = _display!;

  return "\n\\( " @ l @ " \\)\n\n";
};


// start building a new html page with 'n' the name of file to generate
procedure plotly_new_page(n)
{
  var p;

  p._fname = n;
  p._figs  = [||];

  _plotly._pages = _plotly._pages :. p;
};


// open up a brower tab with the error plot of 's'
procedure plotly_error_in_brower(s)
{
  var prev_fig;
  var r,f,tname,ptype;

  prev_fig = _plotly._figure;

  if (s._min_type == relative) then {
    f = 1-s._poly(x)/s._func(x);
    ptype = "rel error: ";
  } else {
    f = s._func(x)-s._poly(x);
    ptype = "abs error: ";
  };
  
  r = s._range;
  tname = s_get_string_field(s, "_name", "" @ s._func);
  r = plotly_make_trace(f, r, 400, tname, "lines");


  r = _plotly._html_header     @
    plotly_poly_to_mathjax(s._poly) @
      "<div id='fig1' style='width:80%'></div>"  @
      "<script>\nvar plot0"    @
      r                        @
      "var data = [plot0];\n"  @
      "var layout = {title:  '" @ ptype @ tname @ "'};\n" @
      "Plotly.newPlot('fig1', data, layout, {displaylogo: false, autosizable: true});</script>\n"               @
      _plotly._html_footer;

  _plotly._figure = prev_fig;

  print(r) > "junk.html";
  plotly_show_html("junk.html");

};
