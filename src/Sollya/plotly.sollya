/* -*- mode: c; -*- */

// Marc B. Reynolds, 2016
// Public Domain under http://unlicense.org, see link for details.

// Create plot.ly plots including generating an html page which can be auto-displayed.

// environment variables
_plotly._html_header = "<!DOCTYPE html><html><head><meta charset='utf-8'><title>Plot</title>" @
                       "<script src='https://cdn.plot.ly/plotly-latest.min.js'></script>"     @
                       "<script type='text/javascript' src='https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>" @
                       "</head><body>\n" @
  "<style>body{margin:auto;padding:15px;text-align:justify;line-height:140%; -webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;font-size:14px;font-smoothing:antialiased;color:#222;" @
   "font-family:Roboto, sans-serif;" @
  "}</style><style>h1{border-bottom: 2px solid #666; color: #333; padding: 20px 0 8px }</style><style>h2{border-bottom: 1px solid #888; color: #555; padding: 20px 0 4px }</style></style><style>div.funclist{font-size: 12px}</style>";


//<script type='text/x-mathjax-config'>MathJax.Hub.Config({ TeX: { equationNumbers: {autoNumber: 'AMS'} } });</script>";

  
_plotly._html_footer = "</body></html>";

_plotly._round_digits = 12;       // number of binary digits to round to
_plotly._entries_per_line = 3;    // number of values to emit per line

_plotly._pages = [||];            // list of pages being built

_plotly._points           = 400;
_plotly._junk_file        = "junk.html";

_plotly._fig_width        = "80%";
_plotly._tickformat_x     = "e";
_plotly._tickformat_y     = "";
_plotly._ticks_x          = 4;
_plotly._ticks_y          = 4;

// dumb attempt to figure out the OS
_plotly_ostype_macro = "  case `uname -s` in Linux*) echo 0;; CYGWIN*) echo 1 ;; Darwin*) echo 2;; *) echo -1;;esac";

// page structure: _plotly.pages stores an in-order list of structures
//   _fname   file name to create (foo.html)
//   _figs    in-order list of figures (figure structure)

// figure structure: actively building at _plotly._figure
//   _title   tile of the plot
//   _trace   list of traces
//   _text    string of text to proceed the figure

_plotly_debug = false;

procedure plotly_debug_print(l=...)
{
  if (_plotly_debug == true) then {
     print(l);
  };
};


//**************************************
// 

// start building a new html page with 'n' the name of file to generate
procedure plotly_new_page(n)
{
  var p;
  
  // deal with existing page
  if (s_has_field(_plotly, "_page")) then {
    var l;
    l = length(s_get_field(_plotly._page, "_figs", [||]));
    
    if (l >= 1) then {
      _plotly._pages = _plotly._pages :. _plotly._page;
    } else {
      if (a_warn_once("plotly_new_page - previous page is empty")) then {
        print("  page:", _plotly._page._fname);
      };
    };
  };

  // build into temp variable to insure there are no left-overs
  // from previous structure.
  p._fname   = n;
  p._figs    = [||];
  p._traces  = [||];
  p._text    = "";
  p._num_traces = 0;

  _plotly._page = p;
};


procedure _page_add_text(s)
{
  plotly_debug_print("_page_add_text");
  _plotly._figure._text = s_get_string_field(_plotly._figure, "_text", "") @ s;
  plotly_debug_print("  :_page_add_text");
};

procedure plotly_add_trace(l=...)
{
  var s;
  plotly_debug_print("plotly_add_trace");
  s = l[0];

  // only add an approximation that isn't in error
  if (!a_has_error(s)) then {
    var pname;
    var tnum;
    tnum = _plotly._page._num_traces;

    if (length(l) > 1) then {
      pname = l[1];
      if (length(l) > 2) then {
        s._equation = l[2];
      };
    } else {
      pname = "P_{" @ tnum @ "}";
    }; 

    s._trace_num = tnum;    
    _plotly._figure._latex  = _plotly._figure._latex :. pname;
    _plotly._figure._approx = _plotly._figure._approx :. s;
    _plotly._page._num_traces := tnum + 1;
  } else {
    a_warn_once("plotly_add_trace - adding an approximation with an error");
  };

  plotly_debug_print("  :plotly_add_trace");
};






// attempt to figure out some shell commands
procedure plotly_guess_environment()
{
  var t;

  t = parse(bashevaluate(_plotly_ostype_macro));

  if (t == 1) then {
    _plotly._open_html = "cygstart ";
    } else if (t == 2) then {
     _plotly._open_html = "open ";
  };
};

// attempt to show 'fname' in a browser
procedure plotly_show_html(fname)
{
  if (!s_has_field(_plotly, "_open_html")) then {
    plotly_guess_environment();      
  };

  if (s_has_field(_plotly, "_open_html")) then {
    bashexecute(_plotly._open_html @ fname);
  } else {
    print("ERROR: I'm not smart enough to open a brower page");
  };
};


// creates a plot trace of function 'f' over range 'r'
// using 'n' equispaced samples.  Names the plot 'tname'
// using plot.ly mode 'tmode'.
procedure plotly_make_trace(f,r,n,tname,tmode)
{
  // nothing clever just equispaced sampling
  // of the function.
  var r,i;
  var xl,yl;
  var x0,x1,y0,dx,nd,ei;

  plotly_debug_print("plotly_make_trace");

  x0  = inf(r);
  x1  = sup(r);
  dx := (x1-x0)/n;

  xl  = "    x:[";
  yl  = "    y:[";
  i   = 0;
  nd  = _plotly._round_digits;
  ei  = _plotly._entries_per_line;

  while(x0 <= x1) do {
    xl = xl @ round(x0,nd,RN);
    yl = yl @ round(evaluate(f,x0),nd,RN);
    x0 := x0+dx;
    i  := i+1;

    if (x0 <= x1) then {
      xl = xl @ ",";
      yl = yl @ ",";
    };
    
    if (i > ei) then {
      i  = 0;
      xl = xl @ "\n    ";
      yl = yl @ "\n    ";
    } else {
      xl = xl @ " ";
      yl = yl @ " ";
    };
  };

  xl = xl @ "],\n";
  yl = yl @ "],\n  mode: '" @ tmode @ "'";
  yl = yl @ ",\n  name: '"  @ tname @ "'";
  yl = yl @ "\n};\n\n";

  r = " = {\n" @ xl @ yl;

  plotly_debug_print("  :plotly_make_trace");

  return r;
};

procedure plotly_abs_error_trace(s, tname)
{
  return plotly_make_trace(s._poly(x)-s._func(x), s._range, _plotly._points, tname, "lines");
};


procedure plotly_rel_error_trace(s, tname)
{
  return plotly_make_trace(1-s._poly(x)/s._func(x), s._range, _plotly._points, tname, "lines");
};

// add an error trace to current figure
//KILL
procedure plotly_add_error_trace(s)
{
  var t,tname;

  tname = "";

  if (s._min_type == relative) then {
    t = plotly_rel_error_trace(s, tname);
  } else {
    t = plotly_abs_error_trace(s, tname);
  };

  _plotly._figure._trace = _plotly._figure._trace :. t;
};



// returns an inline string of polynomial 'p' using exactly representable coefficients
procedure plotly_poly_to_tex(p)
{
  // only 
  var l,e,m,d,i, _display,xe,xm;

  plotly_debug_print("plotly_to_tex");
  
  l = "";
  m = a_poly_to_degree(p);
  e = length(m)-1;

  _display = display;
  display  = decimal!;

  if (e != -1) then {
    for i from e to 0 by -1 do {
      d = m[i];
      c = coeff(p,d);
      xe = exponent(c);
      xm = mantissa(c);

      if (d > 1) then {
        l = " x^{" @ d @ "}" @ l;
      } else if (d == 1) then {
        l = " x" @ l;
      };

      if (xe != 0) then {
        l = " \\times 2^{" @ xe @ "}" @ l;
      };

      if (xm != 1 || e == 0) then {
         l = xm @ l;
      };

      if (c >= 0 && i != 0) then {
        l = "+" @ l;
      };
    };
  } else {
    print("  :WARNING: plotly_to_tex - not a straight polynomial", p);
    l = "" @ p;
  };

  display  = _display!;
  plotly_debug_print("  :plotly_to_tex");

  return l;
};


// build and write out all the pages
procedure plotly_build_pages()
{
  var e,i,_display;

  plotly_debug_print("plotly_build_pages");

  // add last figure to page
  _plotly_push_figure(false);  

  // add any current page to list
  if (s_has_field(_plotly, "_page")) then {
    var l;
    l = length(s_get_field(_plotly._page, "_figs", [||]));
    
    if (l >= 1) then {
      _plotly._pages = _plotly._pages :. _plotly._page;
    };
  };

  e = length(_plotly._pages)-1;

  _display = display;
  display  = decimal!;
  
  for i from 0 to e do {
     plotly_debug_print("  ", _plotly._pages[i]._fname);
     _plotly_build_page(_plotly._pages[i]);
  };

  display  = _display!;

  _plotly._pages = [||];

  plotly_debug_print("  :plotly_build_pages");
};


// temp hack
procedure plotly_approx_to_tex(s, name)
{
  return "\n \\( " @ name @ " (x)  =" @ plotly_poly_to_tex(s._poly) @ "\\\\ \\)";
};

// open up a brower tab with the error plot of 's'
procedure plotly_error_in_brower(s)
{
  var prev_fig;
  var r,f,tname,ptype;

  plotly_debug_print("plotly_error_in_brower");

  prev_fig = _plotly._figure;

  if (s._min_type == relative) then {
    f = 1-s._poly(x)/s._func(x);
    ptype = "rel error: ";
  } else {
    f = s._func(x)-s._poly(x);
    ptype = "abs error: ";
  };
  
  r = s._range;
  tname = s_get_string_field(s, "_name", "" @ s._func);
  r = plotly_make_trace(f, r, _plotly._points, tname, "lines");


  r = _plotly._html_header     @
      plotly_approx_to_tex(s, "P_0")  @
      "<div id='fig1' style='width:80%'></div>"  @
      "<script>\nvar plot0"    @
      r                        @
      "var data = [plot0];\n"  @
      "var layout = {title:  '" @ ptype @ tname @ "'};\n" @
      "Plotly.newPlot('fig1', data, layout, {displaylogo: false, autosizable: true});</script>\n"               @
      _plotly._html_footer;

  _plotly._figure = prev_fig;

  print(r) > _plotly._junk_file;
  plotly_show_html(_plotly._junk_file);
  plotly_debug_print("  :plotly_error_in_brower");
};


//**************************************
// absolute and relative error plot support


procedure _plotly_build_error_figure()
{
};

procedure _plotly_build_func_figure()
{
};


procedure plotly_page_make_figure()
{
  var s;

 _plotly.fig_count := _plotly.fig_count + 1;  
};

procedure _plotly_push_figure(warn)
{
  var r;

  plotly_debug_print("_plotly_push_figure");

  r = 0;
  
  if (s_has_field(_plotly, "_figure")) then {
    var l;
    l = length(s_get_field(_plotly._figure, "_approx", [||]));
    if (l >= 1) then {
       plotly_debug_print("  now:", l);
      _plotly._page._figs = _plotly._page._figs :. _plotly._figure;
    } else {
      print("-");  // TODO
    };
  };

  plotly_debug_print("  :_plotly_push_figure");

  //return r;
};


// common initialization of various figures
procedure _plotly_new_figure_setup(title)
{
  var f;
  plotly_debug_print("plotly_new_figure", title);
  _plotly_push_figure(false);        // add any working to page

  // new structure to insure everthing's reset
  f._title   = title;  // title for figure
  f._approx = [||];    // list of approximations
  f._latex  = [||];    // list of Tex names per approximation
  _plotly._figure = f;
};

// start a new error plot figure
procedure plotly_new_error_figure(title)
{
  _plotly_new_figure_setup(title);
  _plotly._figure._build   = "_plotly_build_error_figure();";
};

// start a figure that shows reference and approximations
procedure plotly_new_func_figure(title)
{
  _plotly_new_figure_setup(title);
  _plotly._figure._build  = "_plotly_build_func_figure();";
};


//**************************************
// generic plot support


// KILL: do everything at page time
procedure plotly_build_figure()
{
  if (s_has_field(_plotly._figure, "_build")) then {
    if (length(_plotly._figure._approx) >= 1) then {
      parse(_plotly._figure._build);
    } else {
      a_warn_once("plotly_build_figure - empty figure");
    };
  } else {
    a_warn_once("plotly_build_figure - figure type not configured");
  };
};


procedure _plotly_build_page(page)
{
  var e,i,j,s,f,t;

  plotly_debug_print("_plotly_build_page");
  
  e = length(page._figs)-1;
  s = _plotly._html_header;

  plotly_debug_print("  figures:", e+1);

  // build the main text of the page
  for i from 0 to e do {
    var nt;
    f = page._figs[i];

    // user specified type
    if (s_has_field(f, "_text")) then {
       s = s @ f._text;
    };

    // show the approximation equation
    plotly_debug_print("  approximations:");
    s = s @ "\n<p>\n<div class='funclist'>\\( \\begin{align}\n";

    nt = length(f._approx)-1;
    for j from 0 to nt do {
      var name;
      name = f._latex[j];

      if (!s_has_field(f._approx[j], "_equation")) then {
	  //s = s @ name @ " (x) & =" @ plotly_poly_to_tex(f._approx[j]._poly) @ " \\label{eq" @ f._approx[j]._trace_num @  "} \\\\ \n";
	s = s @ name @ " (x) & =" @ plotly_poly_to_tex(f._approx[j]._poly) @  "\\\\ \n";
      } else {
	s = s @ name @ " (x) & =" @ f._approx[j]._equation @ "\\\\ \n";
      };
    };
    
    s = s @ "\\end{align} \\)\n</div>\n";

    // place the figure
    t = s_get_string_field(f, "_fig_width", _plotly._fig_width);
    s = s @ "\n<div id='fig" @ i @ "' style='width:" @ t @ "'></div>\n";
  };

  
   plotly_debug_print("  plot.ly:");


  s = s @ "\n\n<script>\n";

  // place all of the trace samples
  for i from 0 to e do {
    var nt;
    var bt,a;
    var func;

    func = plotly_abs_error_trace;

    f  = page._figs[i];
    nt = length(f._approx)-1;
    //bt = 

    for j from 0 to nt do {
      a = f._approx[j];
      s = s @ "  trace" @ a._trace_num @ func(a, f._latex[j]);
    };
  };

  // place all of the trace data
  for i from 0 to e do {
    var nt;

    f  = page._figs[i];
    nt = length(f._approx)-1;
    s  = s @ "var data" @ i @ "= [";

    for j from 0 to nt do {
      s = s @ "trace" @ f._approx[j]._trace_num;
      if (j != nt) then { s = s @ ","; };
    };
    
    s = s @ "];\n";
  };

  s = s @ "\n";

  // place the layout and create the plot scripts
  for i from 0 to e do {
    var ft;
    f  = page._figs[i];
    ft = "'" @ f._title @ "'"; //"'figure " @ (i+1) @ "'";
    s  = s @ "var layout" @ i @ "= {title:  " @ ft @  "};\n";
    s  = s @ "Plotly.newPlot('fig"    @ i @ "'," @ 
                            "data"   @ i @ ", " @ 
                            "layout" @ i @ ", {displaylogo: false, autosizable: true});\n";
  };

  s = s @ "</script>";
  s = s @ _plotly._html_footer;

  print(s) > page._fname;

  plotly_debug_print("  :_plotly_build_page");
};

// container 
page.add_text   = _page_add_text;
page.new        = plotly_new_page;
page.section    = proc(s)    { page.add_text("<h1>" @ s @ "</h1>\n"); };
page.subsection = proc(s)    { page.add_text("<h2>" @ s @ "</h2>\n"); };
page.add_trace  = plotly_add_trace;
page.add_tex    = proc(s)    { page.add_text("\\(" @ s @ "\\)"); };

page.get_trace_id = proc() { return _plotly._page._num_traces; };
