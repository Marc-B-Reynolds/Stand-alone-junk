
// This is all very lazy and cut-and-paste
//verbosity=0!;

// generate a slerp impl based on the reference equation
// s(t) = (cos(ta) - d sin(ta)/sin(a)) A + sin(ta)/sin(a) B
//   where d = A.B = cos(a)
//         sin(a) = sqrt(1-a^2)

// slerp{d}_{a}_{c}_{s}{d}
//   d = present if working in doubles
//   a = degree of atan
//   c = degree of cos (x if eliminated)
//   s = degree of sin (x if eliminated)
//   d = present if double angle

// TODO (aka stuff that wasn't pretty much copy-n-paste):
// * zeros aren't rescaled to new range on range reduction/expansion
// * complete error guess code

// ****** CONFIGURATION ******

// explict lengths of polynomials (if useTarget is false)
cosP  = 5;
sinP  = 5;
atanP = 8;

// attempt to match a maximum target error (very hacky atm)
useTarget = true;

// the target error to match (if useTarget is true)
targetError = 2^-24; // temp hack - not working properly

// which to eliminiate: one or zero of these
elimSin      = false;
elimCos      = false;

// errors to minimize
sin_a._min_type  = absolute;
cos_a._min_type  = absolute;
atan_a._min_type = absolute;

hexFloats    = true;         // use hex-floats (otherwise decimal)
atanReduce   = false;        // reduce range of atan input - NOT SUPPORTED
daSinCos     = true;         // double angle after sin/cos

plotErrorEPS = true;         // emit an eps of t. error
singleP      = true;         // working precision: float or double
maxAngle     = pi/2;         // max angle to support in H (2x for R3)

genCode      = false;        // store gen C into 'name'.h

negDot       = true;         // needs to handle (A.B < 0) cases

approxRsqrt  = true;         // use 1/sqrt or approx func ersqrt{d,f}
approxRecip  = true;         // use 1/x    or approx func erecip{d,f} (not used yet)
approxSqrt   = true;         // (not used yet)

// name of approximation functions
ersqrtf      = "rsqrt_nr";    //
erecipf      = "recip_nr";    //
erecipd      = "recipd_nr";   // 
ersqrtd      = "rsqrtd_nr";   // 


// ****** CONFIGURATION (END) ******

// load libraries (hacky)
execute("../../Sollya/util.sollya");
execute("../../Sollya/struct.sollya");
execute("../../Sollya/approx.sollya");


if (elimSin == true && elimCos == true) then {
  print("error: can only eliminate one of sin/cos\n");
  quit;
};

listing = "";

display=decimal!;

name = "slerp";

if (singleP == true) then {
  name      = name @ "_";
  fabs      = "fabsf";
  fptype    = "float";
  fpsuffix  = "f";
  fpformat  = [|24...|];
  zeroCheat = 2^-24;
  toWP      = "";
  toRP      = "";
  one       = "1.f";
  fsqrt     = "sqrtf";
  recip     = "1.f/";
  rsqrt     = "1.f/sqrtf";
  if (approxRsqrt == true) then { rsqrt = ersqrtf;};
} else {
  name      = name @ "d_";
  fabs      = "fabs";
  fptype    = "double";
  fpsuffix  = "";
  fpformat  = [|53...|];
  zeroCheat = 2^-53;
  toWP      = "(double)";
  toRP      = "(float)";
  one       = "1.0";
  fsqrt     = "sqrt";
  recip     = "1.0/";
  rsqrt     = "1.0/sqrt";
  if (approxRsqrt == true) then { rsqrt = ersqrtd;};
};

dotMin  = single(cos(maxAngle));
dotMinL = "" @ dotMin;

// range of atan (TODO: max angle) and add support
if (false/*atanReduce == true*/) then {
  atanR = [zeroCheat; sqrt(2)-1];
} else {
  atanR = [zeroCheat; 1];
};

// ranges of the forward trig approximation(s)
if (daSinCos == true) then {
  cosR  = [0, maxAngle/2];
  sinR  = [zeroCheat, maxAngle/2];
} else {
  cosR  = [0, maxAngle];
  sinR  = [zeroCheat, maxAngle];
};

// init some structure (ranges are temp hack)

a_env._level = 2;

sin_a  = a_setup(sin(x),  sinR);
cos_a  = a_setup(cos(x),  cosR);
atan_a = a_setup(atan(x), atanR);


sin_a._symmetry  = A_SYMMETRY_ODD;
cos_a._symmetry  = A_SYMMETRY_EVEN;
atan_a._symmetry = A_SYMMETRY_ODD;

atan_a._rvar = "a";
atan_a._ivar = "x";
sin_a._ivar  = "ta";
cos_a._ivar  = "ta";

if (daSinCos == true) then {
  sin_a._rvar = "hs";
  cos_a._rvar = "hc";
} else {
  sin_a._rvar = "s";
  cos_a._rvar = "c";
};

if (useTarget == false) then {
  sin_a._nterms  = sinP;
  cos_a._nterms  = cosP;
  atan_a._nterms = atanP;
} else {
  var e;
  e = 2^-24;
  sin_a._target_error  = e/2;
  cos_a._target_error  = e/2;
  atan_a._target_error = e/2;
};





// ****** build approximations ******
//_a_debug = true;

// TODO: target error choice code can be improved
atan_a = a_build_approx(atan_a);

if (useTarget) then {
  atan_b = a_to_target_bound(atan_a);
};

display=decimal!;

if (!elimSin) then {
  sin_a = a_build_approx(sin_a);

  if (useTarget == true) then {
    sin_b = a_to_target_bound(sin_a);
  };
  
  sinN = length(sin_a._degree);
} else sinN = "x";

if (!elimCos) then {
  cos_a = a_build_approx(cos_a);

  if (useTarget) then {
    cos_b = a_to_target_bound(cos_a);
  };
  
  cosN = length(cos_a._degree);
} else cosN = "x";


// build the atan listing using the library
atan_a = a_make_listing(atan_a);
name   = name  @ length(atan_a._degree) @ "_" @ cosN @ "_" @ sinN;

if (daSinCos == true) then {
  name  = name @ "d";
};


if (hexFloats == true) then { display=hexadecimal!; };

// ****** atan approximation ******

atanL = "\n    // compute the angle\n" @ "    " @ fptype @ " x  = y*rs;\n";

atanL = atanL @ atan_a._listing;

atanL = "    // atan setup\n"                         @
        "    " @ fptype @ " y  = " @ one @ "-d;\n"    @
        "    " @ fptype @ " s2 = " @ one @ "-d*d;\n"  @
        "    " @ fptype @ " rs = " @ rsqrt @ "(s2);\n"     @
        atanL;

// ****** sin approximation ******

if (elimSin == false) then {
  var p;

  p = sin_a._poly;

  // manually generating the poly for the moment
  sinL = "";

  for i from degree(p) to 2 by -2 do {
    sinL = "+a2*(" @ coeff(p, i) @ fpsuffix @ sinL @ ")";
  };

  sinL = "ta*(" @ coeff(p, 1) @ fpsuffix @ sinL @ ");\n";

} else {
  sinN = "x";
  if (daSinCos == true) then {
    sinL = fsqrt @ "(" @ one @ "-hc*hc);\n";
  } else {
    sinL = fsqrt @ "(" @ one @ "-c*c);\n";
  };
};

if (daSinCos == true) then {
  sinL = "    " @ fptype @ " hs = " @ sinL;
} else {
  sinL = "    " @ fptype @ " s  = " @ sinL;
};

// ****** cos approximation ******

if (elimCos == false) then {
  var p;
  p = cos_a._poly;

  // manually generating the poly for the moment
  cosL = "";

  for i from degree(p) to 2 by -2 do {
    cosL = "+a2*(" @ coeff(cos_a._poly, i) @ fpsuffix @ cosL @ ")";
  };

  cosL = coeff(cos_a._poly, 0) @ fpsuffix @ cosL @ ";\n";

} else {
  cosN = "x";
  if (daSinCos == true) then {
    sinL = fsqrt @ "(" @ one @ "-hs*hs);\n";
  } else {
    sinL = fsqrt @ "(" @ one @ "-s*s);\n";
  };
};

if (daSinCos == true) then {
  cosL = "    " @ fptype @ " hc = " @ cosL;
} else {
  cosL = "    " @ fptype @ " c  = " @ cosL;
};


// ****** complete ******

listing = listing @
          "    " @ fptype @ " ta = t*a;\n" @
          "    " @ fptype @ " a2 = ta*ta;\n";

if (elimCos == false) then {
  listing = listing @ cosL @ sinL;
} else {
  listing = listing @ sinL @ cosL;
};

// add sin/cos angle doubling if needed

if (daSinCos == true) then {
  listing = listing @ "\n    // double angle of sin/cos\n";

  listing = listing @
            "    " @ fptype @ " th = hc+hc;\n" @
            "    " @ fptype @ " c  = th*hc-" @ one @ ";\n" @
            "    " @ fptype @ " s  = th*hs;\n";
};

// listing for explictly loading the components and performing a naive dot product

dotPart = "  " @ fptype @ " ax  = A->x, ay=A->y, az=A->z, aw=A->w;\n" @
          "  " @ fptype @ " bx  = B->x, by=B->y, bz=B->z, bw=B->w;\n";

dotPart = dotPart @ 
          "  " @ fptype @ " d   = ax*bx+ay*by+az*bz+aw*bw;\n" @
          "  " @ fptype @ " s0,s1;\n\n";

if (negDot == true) then {
  dotPart = dotPart @
            "  " @ fptype @ " sgn = d >= 0 ? 1 : -1;\n" @
            "  d = " @ fabs @ "(d);\n\n";
};


listing = "void " @ name @
          "(quat_t* R, quat_t* A, quat_t* B, float t)\n{\n" @
	  dotPart @
          "  // d on ~[" @ dotMinL @ ",1]\n"      @
          "  if (d < SLERP_CUT) {\n"              @
          atanL                                   @
          "\n    // forward trig\n"               @
          listing                                 @
          "\n    // weights\n"                    @
          "    s1 = s*rs;\n"                      @
          "    s0 = c-d*s1;\n";


if (negDot == true) then {
  listing = listing @ "    s1 *= sgn;\n";
};

listing = listing @
          "  }\n" @
          "  else {\n" @
          "    s0  = "@one@"-t;\n" @
          "    s1  = t;\n";

if (negDot == true) then {
  listing = listing @ "    s1 *= sgn;\n";
};

listing = listing @
          "  }\n\n  // weight sum\n" @
          "  R->x = " @ toRP @ "(s0*ax + s1*bx);\n" @
          "  R->y = " @ toRP @ "(s0*ay + s1*by);\n" @
          "  R->z = " @ toRP @ "(s0*az + s1*bz);\n" @
          "  R->w = " @ toRP @ "(s0*aw + s1*bw);\n}\n";


//plot(sin(x),0,cos(x),[-Pi,Pi],postscriptfile,"plotSinCos");

//P;
//print("norm   = ", dirtyinfnorm(F-P, R),   "\n");
//print("zeroes = ", dirtyfindzeros(F-P, R), "\n");

display=decimal!;


print(listing);

targetError/2;
atan_a._infnorm;
cos_a._infnorm;
sin_a._infnorm;
atan_a;

if (genCode == true) then {
  fname = name @ ".h";
  print(listing) > fname;
};


display=decimal!;


