
// angle of lerp with dot=d at t
procedure lerp_phi(d,t)
{
  var x,y,r;
  x = 1+t*(d-1);
  y = t*sqrt(1-d*d);
  r = atan(y/x);
  
  return r;
};

// angle of lerp with angle=a=arcos(d) at t
procedure lerp_phi_a(a,t)
{
  var x,y,r;
  x = 1+t*(cos(a)-1);
  y = t*sin(a);
  r = atan(y/x);
  
  return r;
};

// abs angle error of lerp
procedure lerp_angle_error_a(a,t)
{
  return t*a - lerp_phi_a(a,t);
};

// make a copy of list as binary32
procedure list_to_f32(l)
{
  var r,v;

  r = [||];

  for i from 0 to length(l)-1 do {
   v = l[i];
   r = r :. single(v);
  };

  return r;
};

// scale elem of 'l' by 's' and convert to binary32
procedure scale_list_to_f32(l,s)
{
  var r,v;

  r = [||];

  for i from 0 to length(l)-1 do {
   v = s*l[i];
   r = r :. single(v);
  };

  return r;
};
